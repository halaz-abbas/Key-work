import "./react-DOh4kPxq.js";
import { appendErrors } from "./index.esm-Bkfax7D7.js";
import { o, s } from "./resolvers-CDsMBNWa.js";
import { $ZodError, parse, parseAsync } from "./core-D1Wcwt56.js";

//#region node_modules/@hookform/resolvers/zod/dist/zod.mjs
function t(r, e) {
	try {
		var o$1 = r();
	} catch (r$1) {
		return e(r$1);
	}
	return o$1 && o$1.then ? o$1.then(void 0, e) : o$1;
}
function s$1(r, e) {
	for (var n = {}; r.length;) {
		var t$1 = r[0], s$2 = t$1.code, i$1 = t$1.message, a$1 = t$1.path.join(".");
		if (!n[a$1]) if ("unionErrors" in t$1) {
			var u = t$1.unionErrors[0].errors[0];
			n[a$1] = {
				message: u.message,
				type: u.code
			};
		} else n[a$1] = {
			message: i$1,
			type: s$2
		};
		if ("unionErrors" in t$1 && t$1.unionErrors.forEach(function(e$1) {
			return e$1.errors.forEach(function(e$2) {
				return r.push(e$2);
			});
		}), e) {
			var c = n[a$1].types, f = c && c[t$1.code];
			n[a$1] = appendErrors(a$1, e, n, s$2, f ? [].concat(f, t$1.message) : t$1.message);
		}
		r.shift();
	}
	return n;
}
function i(r, e) {
	for (var n = {}; r.length;) {
		var t$1 = r[0], s$2 = t$1.code, i$1 = t$1.message, a$1 = t$1.path.join(".");
		if (!n[a$1]) if ("invalid_union" === t$1.code && t$1.errors.length > 0) {
			var u = t$1.errors[0][0];
			n[a$1] = {
				message: u.message,
				type: u.code
			};
		} else n[a$1] = {
			message: i$1,
			type: s$2
		};
		if ("invalid_union" === t$1.code && t$1.errors.forEach(function(e$1) {
			return e$1.forEach(function(e$2) {
				return r.push(e$2);
			});
		}), e) {
			var c = n[a$1].types, f = c && c[t$1.code];
			n[a$1] = appendErrors(a$1, e, n, s$2, f ? [].concat(f, t$1.message) : t$1.message);
		}
		r.shift();
	}
	return n;
}
function a(o$1, a$1, u) {
	if (void 0 === u && (u = {}), function(r) {
		return "_def" in r && "object" == typeof r._def && "typeName" in r._def;
	}(o$1)) return function(n, i$1, c) {
		try {
			return Promise.resolve(t(function() {
				return Promise.resolve(o$1["sync" === u.mode ? "parse" : "parseAsync"](n, a$1)).then(function(e) {
					return c.shouldUseNativeValidation && o({}, c), {
						errors: {},
						values: u.raw ? Object.assign({}, n) : e
					};
				});
			}, function(r) {
				if (function(r$1) {
					return Array.isArray(null == r$1 ? void 0 : r$1.issues);
				}(r)) return {
					values: {},
					errors: s(s$1(r.errors, !c.shouldUseNativeValidation && "all" === c.criteriaMode), c)
				};
				throw r;
			}));
		} catch (r) {
			return Promise.reject(r);
		}
	};
	if (function(r) {
		return "_zod" in r && "object" == typeof r._zod;
	}(o$1)) return function(s$2, c, f) {
		try {
			return Promise.resolve(t(function() {
				return Promise.resolve(("sync" === u.mode ? parse : parseAsync)(o$1, s$2, a$1)).then(function(e) {
					return f.shouldUseNativeValidation && o({}, f), {
						errors: {},
						values: u.raw ? Object.assign({}, s$2) : e
					};
				});
			}, function(r) {
				if (function(r$1) {
					return r$1 instanceof $ZodError;
				}(r)) return {
					values: {},
					errors: s(i(r.issues, !f.shouldUseNativeValidation && "all" === f.criteriaMode), f)
				};
				throw r;
			}));
		} catch (r) {
			return Promise.reject(r);
		}
	};
	throw new Error("Invalid input: not a Zod schema");
}

//#endregion
export { a as zodResolver };
//# sourceMappingURL=@hookform_resolvers_zod.js.map