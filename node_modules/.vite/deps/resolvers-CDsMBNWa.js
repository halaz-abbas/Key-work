import { get, set } from "./index.esm-Bkfax7D7.js";

//#region node_modules/@hookform/resolvers/dist/resolvers.mjs
var r = (t, r$1, o$1) => {
	if (t && "reportValidity" in t) {
		const s$1 = get(o$1, r$1);
		t.setCustomValidity(s$1 && s$1.message || ""), t.reportValidity();
	}
}, o = (e, t) => {
	for (const o$1 in t.fields) {
		const s$1 = t.fields[o$1];
		s$1 && s$1.ref && "reportValidity" in s$1.ref ? r(s$1.ref, o$1, e) : s$1 && s$1.refs && s$1.refs.forEach((t$1) => r(t$1, o$1, e));
	}
}, s = (r$1, s$1) => {
	s$1.shouldUseNativeValidation && o(r$1, s$1);
	const n$1 = {};
	for (const o$1 in r$1) {
		const f = get(s$1.fields, o$1), c = Object.assign(r$1[o$1] || {}, { ref: f && f.ref });
		if (i(s$1.names || Object.keys(r$1), o$1)) {
			const r$2 = Object.assign({}, get(n$1, o$1));
			set(r$2, "root", c), set(n$1, o$1, r$2);
		} else set(n$1, o$1, c);
	}
	return n$1;
}, i = (e, t) => {
	const r$1 = n(t);
	return e.some((e$1) => n(e$1).match(`^${r$1}\\.\\d+`));
};
function n(e) {
	return e.replace(/\]|\[/g, "");
}

//#endregion
export { o, s };
//# sourceMappingURL=resolvers-CDsMBNWa.js.map